// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  phone     String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  verificationToken String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties     Property[]
  savedProperties SavedProperty[]
  sentMessages   Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  reviews        Review[]
  notifications  Notification[]

  @@map("users")
}

model Property {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  bedrooms    Int
  bathrooms   Int
  area        Float
  address     String
  city        String
  state       String
  zipCode     String
  latitude    Float?
  longitude   Float?
  propertyType PropertyType
  listingType ListingType
  status      PropertyStatus @default(AVAILABLE)
  featured    Boolean       @default(false)
  images      String[]
  amenities   String[]
  yearBuilt   Int?
  parking     Int?
  petFriendly Boolean       @default(false)
  furnished   Boolean       @default(false)
  utilities   String[]
  
  // Agent/User relation
  agentId     String
  agent       User         @relation(fields: [agentId], references: [id])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  savedProperties SavedProperty[]
  messages       Message[]
  reviews        Review[]
  viewings       Viewing[]

  @@map("properties")
}

model SavedProperty {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
  @@map("saved_properties")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String
  receiverId String
  propertyId String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User     @relation("MessageSender", fields: [senderId], references: [id])
  receiver User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  property Property? @relation(fields: [propertyId], references: [id])

  @@map("messages")
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int      // 1-5 stars
  comment    String?
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
  @@map("reviews")
}

model Viewing {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String
  userId     String
  scheduledAt DateTime
  status     ViewingStatus @default(SCHEDULED)
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  property Property @relation(fields: [propertyId], references: [id])

  @@map("viewings")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?            // Additional data for the notification
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  AGENT
  ADMIN
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  LAND
  COMMERCIAL
}

enum ListingType {
  SALE
  RENT
}

enum PropertyStatus {
  AVAILABLE
  PENDING
  SOLD
  RENTED
  UNAVAILABLE
}

enum ViewingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum NotificationType {
  PROPERTY_UPDATE
  MESSAGE
  VIEWING_REMINDER
  PRICE_CHANGE
  SYSTEM
}
